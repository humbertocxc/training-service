version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: training-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - training-network

  training-service:
    build:
      context: .
      dockerfile: Dockerfile
    image: training-service:latest
    container_name: training-service-prod
    restart: always
    ports:
      - '${PORT:-3000}:3000'
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?schema=public
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      PORT: ${PORT:-3000}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - training-network
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 3s
      start_period: 40s
      retries: 3
  rabbitmq:
    image: rabbitmq:3-management
    container_name: training-rabbitmq-prod
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    ports:
      - '${RABBITMQ_PORT:-5672}:5672'
      - '${RABBITMQ_MANAGEMENT_PORT:-15672}:15672'
    networks:
      - training-network

volumes:
  postgres_data_prod:
    driver: local

networks:
  training-network:
    driver: bridge
